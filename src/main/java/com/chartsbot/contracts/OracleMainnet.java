package com.chartsbot.contracts;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.StaticArray2;
import org.web3j.abi.datatypes.generated.StaticArray8;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class OracleMainnet extends Contract {
    public static final String BINARY = "600180546001600160a01b0319908116735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f179182905560028054821673c0aee478e3658e2610c5f7a4a2e1777ce9e4f2ac1790819055600380548316737d86446ddb609ed0f5f8684acf30380a356b2b4c179081905560048054841673baf9a5d4b0052359326a6cdab54babaa3a3a9643179081905560126005556006805485166001600160a01b0396871617905560078054851693861693909317909255600880548416918516919091178155600980549093169190931617905561018060405273a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48608090815273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc260a052736b175474e89094c44da98b954eedeac495271d0f60c05273dac17f958d2ee523a2206206994597c13d831ec760e05273a47c8bf37f92abed4a126bda807a7b7498661acd61010052732260fac5e5542a773aa44fbcfedf7c193bc2c5996101205273db25f211ab05b1c97d595516f45794528a807ad86101405273514910771af9ca656af840dff83e8264ecf986ca61016052620001aa91600a9190620003f4565b506040805160c08101825273a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48815273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26020820152736b175474e89094c44da98b954eedeac495271d0f9181019190915273dac17f958d2ee523a2206206994597c13d831ec76060820152732260fac5e5542a773aa44fbcfedf7c193bc2c599608082015273db25f211ab05b1c97d595516f45794528a807ad860a08201526200026090600b906006620003f4565b50600c80546001600160a01b03191673a0b86991c6218b36c1d19d4a2e9eb0ce3606eb481790556040805180820190915273fd2a8fa60abd58efe3eee34dd494cd491dc1490081527302d341ccb60faaf662bc0554d13778015d1b285c6020820152620002d290600d906002620003f4565b50604080516060810182527349849c98ae39fff122806c06791fa73784fb3675815273075b1bb99792c9e1041ba13afef80c91a1e70fb3602082015273aa17a236f2badc98ddc0cf999abb47d47fc0a6cf918101919091526200033a90600e906003620003f4565b503480156200034857600080fd5b5060405162004a5238038062004a52833981810160405260208110156200036e57600080fd5b5051806001600160a01b038116620003cd576040805162461bcd60e51b815260206004820152601e60248201527f6e65772073746f726167652073686f756c646e277420626520656d7074790000604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055506200047f565b8280548282559060005260206000209081019282156200044c579160200282015b828111156200044c57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000415565b506200045a9291506200045e565b5090565b5b808211156200045a5780546001600160a01b03191681556001016200045f565b6145c3806200048f6000396000f3fe608060405234801561001057600080fd5b50600436106101fb5760003560e01c8063674dbc1d1161011a578063a52cd773116100ad578063cabbd3641161007c578063cabbd36414610713578063d47e25db14610739578063ddebf79514610741578063deed7a5b14610767578063e6f6147214610784576101fb565b8063a52cd77314610667578063ab6e623a146106a1578063b5aaf60b146106c7578063be68c349146106ed576101fb565b80638988d54f116100e95780638988d54f1461060b5780639137c1a714610613578063975057e7146106395780639b4f227814610641576101fb565b8063674dbc1d1461057357806368da76ed146105995780638225458d146105bf57806382e1faea146105e5576101fb565b80634770a52e1161019257806355a31dd81161016157806355a31dd8146104125780635aa6e6751461041a5780635e5a5fd6146104225780635e72f13a1461048c576101fb565b80634770a52e146103345780634897fa451461036057806348e79b8a146103ed57806349a40e0f146103f5576101fb565b80633655ac3c116101ce5780633655ac3c146102ba57806339318443146102c257806341976e09146102df57806346e3b90614610317576101fb565b8063225f879c14610200578063304c836d1461022857806332343e951461024e57806332ca75d214610296575b600080fd5b6102266004803603602081101561021657600080fd5b50356001600160a01b03166107aa565b005b6102266004803603602081101561023e57600080fd5b50356001600160a01b0316610938565b6102746004803603602081101561026457600080fd5b50356001600160a01b0316610ca3565b6040805193151584529115156020840152151582820152519081900360600190f35b61029e610cda565b604080516001600160a01b039092168252519081900360200190f35b61029e610ce9565b61029e600480360360208110156102d857600080fd5b5035610cf8565b610305600480360360208110156102f557600080fd5b50356001600160a01b0316610d1f565b60408051918252519081900360200190f35b61029e6004803603602081101561032d57600080fd5b5035610eed565b6102266004803603604081101561034a57600080fd5b506001600160a01b038135169060200135610efa565b6103866004803603602081101561037657600080fd5b50356001600160a01b031661114f565b6040518083600260200280838360005b838110156103ae578181015183820152602001610396565b5050505090500182600260200280838360005b838110156103d95781810151838201526020016103c1565b505050509050019250505060405180910390f35b61029e61153a565b61029e6004803603602081101561040b57600080fd5b5035611549565b61029e611556565b61029e611565565b6104486004803603602081101561043857600080fd5b50356001600160a01b03166115e5565b604051808361010080838360005b8381101561046e578181015183820152602001610456565b505086519290940191825250915083905061010080838360206103c1565b61053f600480360360408110156104a257600080fd5b6001600160a01b0382351691908101906040810160208201356401000000008111156104cd57600080fd5b8201836020820111156104df57600080fd5b8035906020019184602083028401116401000000008311171561050157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611c14945050505050565b604080516001600160a01b039586168152939094166020840152901515828401521515606082015290519081900360800190f35b6102266004803603602081101561058957600080fd5b50356001600160a01b0316611c94565b610226600480360360208110156105af57600080fd5b50356001600160a01b0316611dc0565b610226600480360360208110156105d557600080fd5b50356001600160a01b0316611eec565b610386600480360360208110156105fb57600080fd5b50356001600160a01b0316612129565b6103056125a5565b6102266004803603602081101561062957600080fd5b50356001600160a01b03166125ab565b61029e6126e1565b6102266004803603602081101561065757600080fd5b50356001600160a01b03166126f0565b61068d6004803603602081101561067d57600080fd5b50356001600160a01b03166128d6565b604080519115158252519081900360200190f35b610226600480360360208110156106b757600080fd5b50356001600160a01b031661292b565b610226600480360360208110156106dd57600080fd5b50356001600160a01b0316612b7b565b6102266004803603602081101561070357600080fd5b50356001600160a01b0316612ca7565b6102266004803603602081101561072957600080fd5b50356001600160a01b0316612dd3565b61029e612f3a565b6103056004803603602081101561075757600080fd5b50356001600160a01b0316612f49565b61029e6004803603602081101561077d57600080fd5b5035613092565b61068d6004803603602081101561079a57600080fd5b50356001600160a01b031661309f565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b1580156107f557600080fd5b505afa158015610809573d6000803e3d6000fd5b505050506040513d602081101561081f57600080fd5b5051610863576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b61086c8161309f565b156108b4576040805162461bcd60e51b815260206004820152601360248201527220b63932b0b23c90309035b2bc903a37b5b2b760691b604482015290519081900360640190fd5b600a80546001810182556000919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80180546001600160a01b0383166001600160a01b0319909116811790915560408051918252517f0a56c88bece4295107fd874c5ddacbb849aebef9d72fc42d81dd2b5caeaec1c69181900360200190a150565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b15801561098357600080fd5b505afa158015610997573d6000803e3d6000fd5b505050506040513d60208110156109ad57600080fd5b50516109f1576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b806000806109fe836130eb565b915091508180610a0b5750805b610a4f576040805162461bcd60e51b815260206004820152601060248201526f2737ba1030b71032bc31b2b83a34b7b760811b604482015290519081900360640190fd5b6000610a5a856130eb565b50905060008060008315610b60575060009150815b600d54831015610ab557600d8381548110610a8657fe5b6000918252602090912001546001600160a01b0389811691161415610aaa57610ab5565b600190920191610a6f565b600d5460001901831015610b2e57600d8360010181548110610ad357fe5b600091825260209091200154600d80546001600160a01b039092169185908110610af957fe5b600091825260209091200180546001600160a01b0319166001600160a01b039290921691909117905560019290920191610ab5565b600d805480610b3957fe5b600082815260209020810160001990810180546001600160a01b0319169055019055610c55565b506000905060015b600e54821015610bae57600e8281548110610b7f57fe5b6000918252602090912001546001600160a01b0389811691161415610ba357610bae565b600190910190610b68565b600e5460001901821015610c2757600e8260010181548110610bcc57fe5b600091825260209091200154600e80546001600160a01b039092169184908110610bf257fe5b600091825260209091200180546001600160a01b0319166001600160a01b039290921691909117905560019190910190610bae565b600e805480610c3257fe5b600082815260209020810160001990810180546001600160a01b03191690550190555b604080516001600160a01b038a1681526020810183905281517f705d921b6719e8c0bad7ec0d15f07df9e94d189255b633fc210af8d34ba1591d929181900390910190a15050505050505050565b600080600080610cb285613199565b90506000610cbf8661321b565b90506000610ccc876133f2565b919791965091945092505050565b6003546001600160a01b031681565b6001546001600160a01b031681565b600d8181548110610d0557fe5b6000918252602090912001546001600160a01b0316905081565b600c546000906001600160a01b0383811691161415610d445750600554600a0a610ee8565b6000806000610d5285610ca3565b9194509250905060008080808680610d675750845b15610e2157610d74614550565b610d7c614550565b88610d8f57610d8a8b612129565b610d98565b610d988b61114f565b6000945090925090505b6002831015610e1057610dc4828460028110610dba57fe5b6020020151612f49565b955085610dde575060009850610ee8975050505050505050565b600554600a0a818460028110610df057fe5b6020020151870281610dfe57fe5b04945092840192600190920191610da2565b839950505050505050505050610ee8565b8515610ed557610e2f61456e565b610e3761456e565b610e408b6115e5565b6000945090925090505b6008831015610e10576000828460088110610e6157fe5b60200201516001600160a01b03161415610e7a57610e10565b610e89828460088110610dba57fe5b955085610ea3575060009850610ee8975050505050505050565b600554600a0a818460088110610eb557fe5b6020020151870281610ec357fe5b04945092840192600190920191610e4a565b610ede89612f49565b9750505050505050505b919050565b600e8181548110610d0557fe5b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b158015610f4557600080fd5b505afa158015610f59573d6000803e3d6000fd5b505050506040513d6020811015610f6f57600080fd5b5051610fb3576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b600080610fbf846130eb565b909250905081158015610fd0575080155b611018576040805162461bcd60e51b815260206004820152601460248201527320b63932b0b23c9030b71032bc31b2b83a34b7b760611b604482015290519081900360640190fd5b6001831115611064576040805162461bcd60e51b81526020600482015260136024820152724f6e6c7920616363657074732030206f72203160681b604482015290519081900360640190fd5b826110b957600d80546001810182556000919091527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50180546001600160a01b0319166001600160a01b038616179055611105565b600e80546001810182556000919091527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd0180546001600160a01b0319166001600160a01b0386161790555b604080516001600160a01b03861681526020810185905281517fe16eefa434a78b51564135e1d6fdbebd114ba6a1d28885e2bc7b60ebae031cb0929181900390910190a150505050565b611157614550565b61115f614550565b82611168614550565b611170614550565b826001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156111a957600080fd5b505afa1580156111bd573d6000803e3d6000fd5b505050506040513d60208110156111d357600080fd5b50516001600160a01b0390811683526040805163d21220a760e01b815290519185169163d21220a791600480820192602092909190829003018186803b15801561121c57600080fd5b505afa158015611230573d6000803e3d6000fd5b505050506040513d602081101561124657600080fd5b50518260016001600160a01b0390921660209290920201526000828160200201516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561129f57600080fd5b505afa1580156112b3573d6000803e3d6000fd5b505050506040513d60208110156112c957600080fd5b505160ff169050600083600160200201516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561131257600080fd5b505afa158015611326573d6000803e3d6000fd5b505050506040513d602081101561133c57600080fd5b50516040805163313ce56760e01b8152905160ff90921692506000916001600160a01b038b169163313ce567916004808301926020929190829003018186803b15801561138857600080fd5b505afa15801561139c573d6000803e3d6000fd5b505050506040513d60208110156113b257600080fd5b505160408051630240bc6b60e21b8152905160ff909216925060009182916001600160a01b038a1691630902f1ac91600480820192606092909190829003018186803b15801561140157600080fd5b505afa158015611415573d6000803e3d6000fd5b505050506040513d606081101561142b57600080fd5b508051602091820151604080516318160ddd60e01b815290516001600160701b0393841696509290911693506000926001600160a01b038c16926318160ddd926004808201939291829003018186803b15801561148757600080fd5b505afa15801561149b573d6000803e3d6000fd5b505050506040513d60208110156114b157600080fd5b505190508215806114c0575081155b806114c9575080155b156114f557600087815b6020020152600087600160200201525095985093965061153595505050505050565b8060055487860301600a0a84028161150957fe5b048752600554819086860301600a0a83028161152157fe5b046020880152509598509396505050505050505b915091565b6004546001600160a01b031681565b600a8181548110610d0557fe5b6002546001600160a01b031681565b60008060009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156115b457600080fd5b505afa1580156115c8573d6000803e3d6000fd5b505050506040513d60208110156115de57600080fd5b5051905090565b6115ed61456e565b6115f561456e565b6008546040805163bdf475c360e01b81526001600160a01b0386811660048301529151600093929092169163bdf475c391602480820192602092909190829003018186803b15801561164657600080fd5b505afa15801561165a573d6000803e3d6000fd5b505050506040513d602081101561167057600080fd5b50519050600080611680866130eb565b9150915061168c61456e565b61169461456e565b83156117b5576008546040805163a77576ef60e01b81526001600160a01b0388811660048301529151919092169163a77576ef91602480830192610100929190829003018186803b1580156116e857600080fd5b505afa1580156116fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061010081101561172257600080fd5b50600854604080516392e3cc2d60e01b81526001600160a01b03898116600483015291519395509116916392e3cc2d9160248082019261010092909190829003018186803b15801561177357600080fd5b505afa158015611787573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506101008110156117ad57600080fd5b509050611920565b82156118095760085460408051639ac90d3d60e01b81526001600160a01b03888116600483015291519190921691639ac90d3d91602480830192610100929190829003018186803b1580156116e857600080fd5b6008546040805163a77576ef60e01b81526001600160a01b0388811660048301529151919092169163a77576ef91602480830192610100929190829003018186803b15801561185757600080fd5b505afa15801561186b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061010081101561189157600080fd5b50600854604080516359f4f35160e01b81526001600160a01b03898116600483015291519395509116916359f4f3519160248082019261010092909190829003018186803b1580156118e257600080fd5b505afa1580156118f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061010081101561191c57600080fd5b5090505b61192861456e565b6000808a6001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561196457600080fd5b505afa158015611978573d6000803e3d6000fd5b505050506040513d602081101561198e57600080fd5b50516040805163313ce56760e01b815290519192506000916001600160a01b038e169163313ce567916004808301926020929190829003018186803b1580156119d657600080fd5b505afa1580156119ea573d6000803e3d6000fd5b505050506040513d6020811015611a0057600080fd5b505160ff169050611a0f61456e565b600093505b6008841015611c01576000878560088110611a2b57fe5b60200201516001600160a01b03161415611a4457611c01565b868460088110611a5057fe5b60200201516001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b03161415611ace576012858560088110611a9057fe5b602002015273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2878560088110611ab657fe5b6001600160a01b039092166020929092020152611b58565b868460088110611ada57fe5b60200201516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611b1757600080fd5b505afa158015611b2b573d6000803e3d6000fd5b505050506040513d6020811015611b4157600080fd5b505160ff16858560088110611b5257fe5b60200201525b82600554868660088110611b6857fe5b6020020151840301600a0a878660088110611b7f57fe5b60200201510281611b8c57fe5b04818560088110611b9957fe5b6020020152600554600a0a818560088110611bb057fe5b60200201511115611bf6576012858560088110611bc957fe5b602002015103600a0a818560088110611bde57fe5b602002015102818560088110611bf057fe5b60200201525b600190930192611a14565b959a509498505050505050505050915091565b6000806000806000806000611c298989613491565b9250925092506000806000611c3e8c8c6136a6565b92509250925080851115611c7557600084611c5a576001611c5d565b60005b969a5060009950939750949550611c8b945050505050565b50909750955060009450849350611c8b92505050565b92959194509250565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b158015611cdf57600080fd5b505afa158015611cf3573d6000803e3d6000fd5b505050506040513d6020811015611d0957600080fd5b5051611d4d576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b600180546001600160a01b038381166001600160a01b0319808416821794859055600680549091169483169490941790935560408051938452911660208301819052815190927ff36cf3b7f3187ed5217f19ea5137ed68a98983b4d678c78eb886fc378d2c13cf92908290030190a15050565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b158015611e0b57600080fd5b505afa158015611e1f573d6000803e3d6000fd5b505050506040513d6020811015611e3557600080fd5b5051611e79576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b600380546001600160a01b038381166001600160a01b0319808416821794859055600880549091169483169490941790935560408051938452911660208301819052815190927f4803049971913703d2dd43c06110dc7fad451e4603e9f485cbeebdda11263ab092908290030190a15050565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b158015611f3757600080fd5b505afa158015611f4b573d6000803e3d6000fd5b505050506040513d6020811015611f6157600080fd5b5051611fa5576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b80611faf816128d6565b611ff6576040805162461bcd60e51b81526020600482015260136024820152722737ba103090283934b1b4b733902a37b5b2b760691b604482015290519081900360640190fd5b60005b600b5481101561203c57600b818154811061201057fe5b6000918252602090912001546001600160a01b03848116911614156120345761203c565b600101611ff9565b600b54600019018110156120b157600b816001018154811061205a57fe5b600091825260209091200154600b80546001600160a01b03909216918390811061208057fe5b600091825260209091200180546001600160a01b0319166001600160a01b039290921691909117905560010161203c565b600b8054806120bc57fe5b6001900381819060005260206000200160006101000a8154906001600160a01b03021916905590557f267d2347865e6ed4881b044841cfb54745c81ca42c65b9c38e5f24391813642b8360405180826001600160a01b0316815260200191505060405180910390a1505050565b612131614550565b612139614550565b82612142614550565b61214a614550565b826001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561218357600080fd5b505afa158015612197573d6000803e3d6000fd5b505050506040513d60208110156121ad57600080fd5b50516001600160a01b0390811683526040805163d21220a760e01b815290519185169163d21220a791600480820192602092909190829003018186803b1580156121f657600080fd5b505afa15801561220a573d6000803e3d6000fd5b505050506040513d602081101561222057600080fd5b50516001600160a01b039081166020840152825160009116156122ae5782600060200201516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561227d57600080fd5b505afa158015612291573d6000803e3d6000fd5b505050506040513d60208110156122a757600080fd5b50516122b1565b60125b60ff169050600083600160200201516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156122f857600080fd5b505afa15801561230c573d6000803e3d6000fd5b505050506040513d602081101561232257600080fd5b50516040805163313ce56760e01b8152905160ff90921692506000916001600160a01b038b169163313ce567916004808301926020929190829003018186803b15801561236e57600080fd5b505afa158015612382573d6000803e3d6000fd5b505050506040513d602081101561239857600080fd5b505160ff16905060006001600160a01b03871663e7ff42c9878360200201516040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156123f457600080fd5b505afa158015612408573d6000803e3d6000fd5b505050506040513d602081101561241e57600080fd5b5051905060006001600160a01b03881663e7ff42c988600160200201516040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561247857600080fd5b505afa15801561248c573d6000803e3d6000fd5b505050506040513d60208110156124a257600080fd5b5051604080516318160ddd60e01b815290519192506000916001600160a01b038b16916318160ddd916004808301926020929190829003018186803b1580156124ea57600080fd5b505afa1580156124fe573d6000803e3d6000fd5b505050506040513d602081101561251457600080fd5b50519050821580612523575081155b8061252c575080155b1561253a57600087816114d3565b8060055487860301600a0a84028161254e57fe5b048752600554819086860301600a0a83028161256657fe5b04602088015287516001600160a01b03166125935773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc288525b50959850939650505050505050915091565b60055481565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b1580156125f657600080fd5b505afa15801561260a573d6000803e3d6000fd5b505050506040513d602081101561262057600080fd5b5051612664576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b6001600160a01b0381166126bf576040805162461bcd60e51b815260206004820152601e60248201527f6e65772073746f726167652073686f756c646e277420626520656d7074790000604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031681565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b15801561273b57600080fd5b505afa15801561274f573d6000803e3d6000fd5b505050506040513d602081101561276557600080fd5b50516127a9576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b806127b38161309f565b6127f6576040805162461bcd60e51b815260206004820152600f60248201526e2737ba10309025b2bc902a37b5b2b760891b604482015290519081900360640190fd5b6127ff826128d6565b15612851576040805162461bcd60e51b815260206004820152601760248201527f416c726561647920612070726963696e6720746f6b656e000000000000000000604482015290519081900360640190fd5b600b80546001810182556000919091527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90180546001600160a01b0384166001600160a01b0319909116811790915560408051918252517fa2411adfb9f4f19415027646ef07d6436cb8911befcf9d7540902498597158b49181900360200190a15050565b6000805b600b5481101561292257600b81815481106128f157fe5b6000918252602090912001546001600160a01b038481169116141561291a576001915050610ee8565b6001016128da565b50600092915050565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b15801561297657600080fd5b505afa15801561298a573d6000803e3d6000fd5b505050506040513d60208110156129a057600080fd5b50516129e4576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b806129ee8161309f565b612a31576040805162461bcd60e51b815260206004820152600f60248201526e2737ba10309025b2bc902a37b5b2b760891b604482015290519081900360640190fd5b60005b600a54811015612a7757600a8181548110612a4b57fe5b6000918252602090912001546001600160a01b0384811691161415612a6f57612a77565b600101612a34565b600a5460001901811015612aec57600a8160010181548110612a9557fe5b600091825260209091200154600a80546001600160a01b039092169183908110612abb57fe5b600091825260209091200180546001600160a01b0319166001600160a01b0392909216919091179055600101612a77565b600a805480612af757fe5b6001900381819060005260206000200160006101000a8154906001600160a01b03021916905590557fb96050be102aa5c8996d5413c2c6a643eda5e34df5f00774e64542ac53d95c7c8360405180826001600160a01b0316815260200191505060405180910390a1612b68836128d6565b15612b7657612b7683611eec565b505050565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b158015612bc657600080fd5b505afa158015612bda573d6000803e3d6000fd5b505050506040513d6020811015612bf057600080fd5b5051612c34576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b600480546001600160a01b038381166001600160a01b0319808416821794859055600980549091169483169490941790935560408051938452911660208301819052815190927ff36cf3b7f3187ed5217f19ea5137ed68a98983b4d678c78eb886fc378d2c13cf92908290030190a15050565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b158015612cf257600080fd5b505afa158015612d06573d6000803e3d6000fd5b505050506040513d6020811015612d1c57600080fd5b5051612d60576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b600280546001600160a01b038381166001600160a01b0319808416821794859055600780549091169483169490941790935560408051938452911660208301819052815190927ff36cf3b7f3187ed5217f19ea5137ed68a98983b4d678c78eb886fc378d2c13cf92908290030190a15050565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b158015612e1e57600080fd5b505afa158015612e32573d6000803e3d6000fd5b505050506040513d6020811015612e4857600080fd5b5051612e8c576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b80612e968161309f565b612ed9576040805162461bcd60e51b815260206004820152600f60248201526e2737ba10309025b2bc902a37b5b2b760891b604482015290519081900360640190fd5b600c80546001600160a01b038481166001600160a01b03198316811790935560408051938452911660208301819052815190927f2e16cf91be198a0faa8696605c0e261b40b655d82cbf241e4dd6df3cedb1397892908290030190a1505050565b600c546001600160a01b031681565b600c5460009081906001600160a01b0384811691161415612f705750600554600a0a61308c565b6001600160a01b038316612f865750600061308c565b600080600080612ff087600a805480602002602001604051908101604052809291908181526020018280548015612fe657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612fc8575b5050505050611c14565b929650909450925090506000806001600160a01b0386166130145760009650613085565b83156130495761302489876138a9565b915061302f86613b68565b9050600554600a0a8183028161304157fe5b049650613085565b8215613059576130248987613cc5565b613064898787613d1c565b915061306f86613b68565b9050600554600a0a8183028161308157fe5b0496505b5050505050505b92915050565b600b8181548110610d0557fe5b6000805b600a5481101561292257600a81815481106130ba57fe5b6000918252602090912001546001600160a01b03848116911614156130e3576001915050610ee8565b6001016130a3565b60008060005b600d5481101561313d57600d818154811061310857fe5b6000918252602090912001546001600160a01b038581169116141561313557600160009250925050611535565b6001016130f1565b5060005b600e5481101561318d57600e818154811061315857fe5b6000918252602090912001546001600160a01b038581169116141561318557600060019250925050611535565b600101613141565b50600093849350915050565b60095460408051635b16ebb760e01b81526001600160a01b038481166004830152915160009384931691635b16ebb7916024808301926020929190829003018186803b1580156131e857600080fd5b505afa1580156131fc573d6000803e3d6000fd5b505050506040513d602081101561321257600080fd5b50519392505050565b6000808290506060604051806040016040528060068152602001652aa72496ab1960d11b81525090506060604051806040016040528060038152602001620534c560ec1b81525090506060836001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561329f57600080fd5b505afa1580156132b3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156132dc57600080fd5b81019080805160405193929190846401000000008211156132fc57600080fd5b90830190602082018581111561331157600080fd5b825164010000000081118282018810171561332b57600080fd5b82525081516020918201929091019080838360005b83811015613358578181015183820152602001613340565b50505050905090810190601f1680156133855780820380516001836020036101000a031916815260200191505b5060405250505090506133988184614016565b156133bf576001546133b49085906001600160a01b0316614101565b945050505050610ee8565b6133c98183614016565b156133e5576002546133b49085906001600160a01b0316614101565b6000945050505050610ee8565b6008546040805163bdf475c360e01b81526001600160a01b03848116600483015291516000938493169163bdf475c3916024808301926020929190829003018186803b15801561344157600080fd5b505afa158015613455573d6000803e3d6000fd5b505050506040513d602081101561346b57600080fd5b5051905060006001600160a01b038216613486576000613489565b60015b949350505050565b60008080808080808080805b8a51841015613691576006548b516000916001600160a01b03169063e6a43905908f908f90899081106134cc57fe5b60200260200101516040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b15801561352157600080fd5b505afa158015613535573d6000803e3d6000fd5b505050506040513d602081101561354b57600080fd5b810190808051906020019092919050505090506000600760009054906101000a90046001600160a01b03166001600160a01b031663e6a439058f8f898151811061359157fe5b60200260200101516040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b1580156135e657600080fd5b505afa1580156135fa573d6000803e3d6000fd5b505050506040513d602081101561361057600080fd5b505190506001600160a01b038216156136305761362d828f6141a0565b94505b6001600160a01b0381161561364c57613649818f6141a0565b93505b8385118061365a578461365c565b855b975089881115613683578799508d878151811061367557fe5b602002602001015198508093505b50506001909401935061349d565b949850949650929450505050505b9250925092565b6000808080808080805b88518110156138995760085489516000916001600160a01b031690636982eb0b908d908d90869081106136df57fe5b602002602001015160006040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b03168152602001828152602001935050505060206040518083038186803b15801561373d57600080fd5b505afa158015613751573d6000803e3d6000fd5b505050506040513d602081101561376757600080fd5b505190506001600160a01b03811661377f5750613891565b60085460408051633795104960e01b81526001600160a01b03848116600483015291516000939290921691633795104991602480820192602092909190829003018186803b1580156137d057600080fd5b505afa1580156137e4573d6000803e3d6000fd5b505050506040513d60208110156137fa57600080fd5b505190506000613809826130eb565b509050801561381a57505050613891565b6138388d8d868151811061382a57fe5b6020026020010151856142c0565b94508785111561388d578497508b848151811061385157fe5b6020908102919091010151600c54939750955086926001600160a01b038088169116141561388d575093985093965093945061369f9350505050565b5050505b6001016136b0565b5090989197509195509350505050565b6006546040805163e6a4390560e01b81526001600160a01b038581166004830152848116602483015291516000938493169163e6a43905916044808301926020929190829003018186803b15801561390057600080fd5b505afa158015613914573d6000803e3d6000fd5b505050506040513d602081101561392a57600080fd5b505160408051630240bc6b60e21b81529051919250829160009182916001600160a01b03851691630902f1ac916004808301926060929190829003018186803b15801561397657600080fd5b505afa15801561398a573d6000803e3d6000fd5b505050506040513d60608110156139a057600080fd5b5080516020918201516040805163313ce56760e01b815290516001600160701b0393841696509290911693506000926001600160a01b038b169263313ce567926004808201939291829003018186803b1580156139fc57600080fd5b505afa158015613a10573d6000803e3d6000fd5b505050506040513d6020811015613a2657600080fd5b50516040805163313ce56760e01b8152905160ff90921692506000916001600160a01b038a169163313ce567916004808301926020929190829003018186803b158015613a7257600080fd5b505afa158015613a86573d6000803e3d6000fd5b505050506040513d6020811015613a9c57600080fd5b505160408051630dfe168160e01b8152905160ff90921692506000916001600160a01b03881691630dfe1681916004808301926020929190829003018186803b158015613ae857600080fd5b505afa158015613afc573d6000803e3d6000fd5b505050506040513d6020811015613b1257600080fd5b50516001600160a01b038b811691161415613b43578460055483850301600a0a850281613b3b57fe5b049050613b5b565b8360055483850301600a0a860281613b5757fe5b0490505b9998505050505050505050565b600080613b74836128d6565b600c5490915060009081906001600160a01b0386811691161415613b9f57600554600a0a9150613cbd565b8215613bc357600c54613bbc9086906001600160a01b03166138a9565b9150613cbd565b6000806000806000613c2d8a600b805480602002602001604051908101604052809291908181526020018280548015612fe6576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311612fc8575050505050611c14565b93509350935093508115613c4c57613c458a856138a9565b9550613c6a565b8015613c5c57613c458a85613cc5565b613c678a8585613d1c565b95505b600c546001600160a01b03858116911614613c9b57600c54613c969085906001600160a01b03166138a9565b613ca2565b600554600a0a5b9450600554600a0a85870281613cb457fe5b04965050505050505b509392505050565b6007546040805163e6a4390560e01b81526001600160a01b038581166004830152848116602483015291516000938493169163e6a43905916044808301926020929190829003018186803b15801561390057600080fd5b6008546040805163eb85226d60e01b81526001600160a01b0380851660048301528681166024830152858116604483015291516000938593859384938493929092169163eb85226d91606480820192606092909190829003018186803b158015613d8557600080fd5b505afa158015613d99573d6000803e3d6000fd5b505050506040513d6060811015613daf57600080fd5b508051602080830151604093840151845163313ce56760e01b8152945193975090955093506000926001600160a01b038c169263313ce56792600480840193919291829003018186803b158015613e0557600080fd5b505afa158015613e19573d6000803e3d6000fd5b505050506040513d6020811015613e2f57600080fd5b50516040805163313ce56760e01b8152905160ff90921692506000916001600160a01b038b169163313ce567916004808301926020929190829003018186803b158015613e7b57600080fd5b505afa158015613e8f573d6000803e3d6000fd5b505050506040513d6020811015613ea557600080fd5b505160ff1690506004821080613ebb5750600481105b15613ec857600491820191015b6000808415613f6e57604080516307211ef760e01b8152600f89810b600483015288900b6024820152600a86900a604482015290516001600160a01b038a16916307211ef7916064808301926020929190829003018186803b158015613f2d57600080fd5b505afa158015613f41573d6000803e3d6000fd5b505050506040513d6020811015613f5757600080fd5b5051600554909250839003600a0a82029050614007565b60408051635e0d443f60e01b8152600f89810b600483015288900b6024820152600a86900a604482015290516001600160a01b038a1691635e0d443f916064808301926020929190829003018186803b158015613fca57600080fd5b505afa158015613fde573d6000803e3d6000fd5b505050506040513d6020811015613ff457600080fd5b5051600554909250839003600a0a820290505b9b9a5050505050505050505050565b600080826040516020018082805190602001908083835b6020831061404c5780518252601f19909201916020918201910161402d565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120846040516020018082805190602001908083835b602083106140ba5780518252601f19909201916020918201910161409b565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012014613486576000613489565b6000826001600160a01b031663c45a0155610bb86040518263ffffffff1660e01b815260040160206040518083038187803b15801561413f57600080fd5b5086fa9350505050801561416557506040513d602081101561416057600080fd5b505160015b6141715750600061308c565b6000836001600160a01b0316826001600160a01b031614614193576000614196565b60015b925061308c915050565b6000808390506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156141e157600080fd5b505afa1580156141f5573d6000803e3d6000fd5b505050506040513d602081101561420b57600080fd5b505160408051630240bc6b60e21b8152905191925060009182916001600160a01b03861691630902f1ac91600480820192606092909190829003018186803b15801561425657600080fd5b505afa15801561426a573d6000803e3d6000fd5b505050506040513d606081101561428057600080fd5b508051602090910151909250905060006001600160a01b03878116908516146142a957816142ab565b825b6001600160701b031698975050505050505050565b6008546040805163eb85226d60e01b81526001600160a01b038481166004830152868116602483015285811660448301529151600093849384938493919092169163eb85226d916064808301926060929190829003018186803b15801561432657600080fd5b505afa15801561433a573d6000803e3d6000fd5b505050506040513d606081101561435057600080fd5b508051604090910151909250905061436661456e565b81156144a157600854604080516359f4f35160e01b81526001600160a01b038981166004830152915191909216916359f4f35191602480830192610100929190829003018186803b1580156143ba57600080fd5b505afa1580156143ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506101008110156143f457600080fd5b810190809190505090506000886001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561443957600080fd5b505afa15801561444d573d6000803e3d6000fd5b505050506040513d602081101561446357600080fd5b505160ff16905081600f85900b6008811061447a57fe5b6020020151945080600a01600a0a85111561449b5760128103600a0a850294505b50614544565b600854604080516392e3cc2d60e01b81526001600160a01b038981166004830152915191909216916392e3cc2d91602480830192610100929190829003018186803b1580156144ef57600080fd5b505afa158015614503573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061010081101561452957600080fd5b50905080600f84900b6008811061453c57fe5b602002015193505b50919695505050505050565b60405180604001604052806002906020820280368337509192915050565b604051806101000160405280600890602082028036833750919291505056fea2646970667358221220151d8b1283b3a44ad30e4be4d3fc58e9f38b5ef76ec111df911b94f7e55683de64736f6c634300060c0033";

    public static final String FUNC_ADDCURVEEXCEPTION = "addCurveException";

    public static final String FUNC_ADDKEYTOKEN = "addKeyToken";

    public static final String FUNC_ADDPRICINGTOKEN = "addPricingToken";

    public static final String FUNC_CHANGECURVEREGISTRY = "changeCurveRegistry";

    public static final String FUNC_CHANGEDEFINEDOUTPUT = "changeDefinedOutput";

    public static final String FUNC_CHANGEONEINCHFACTORY = "changeOneInchFactory";

    public static final String FUNC_CHANGESUSHIFACTORY = "changeSushiFactory";

    public static final String FUNC_CHANGEUNIFACTORY = "changeUniFactory";

    public static final String FUNC_CHECKKEYTOKEN = "checkKeyToken";

    public static final String FUNC_CHECKPRICINGTOKEN = "checkPricingToken";

    public static final String FUNC_COMPUTEPRICE = "computePrice";

    public static final String FUNC_CURVEEXCEPTIONLIST0 = "curveExceptionList0";

    public static final String FUNC_CURVEEXCEPTIONLIST1 = "curveExceptionList1";

    public static final String FUNC_CURVEREGISTRYADDRESS = "curveRegistryAddress";

    public static final String FUNC_DEFINEDOUTPUTTOKEN = "definedOutputToken";

    public static final String FUNC_GETCURVEUNDERLYING = "getCurveUnderlying";

    public static final String FUNC_GETLARGESTPOOL = "getLargestPool";

    public static final String FUNC_GETONEINCHUNDERLYING = "getOneInchUnderlying";

    public static final String FUNC_GETPRICE = "getPrice";

    public static final String FUNC_GETUNIUNDERLYING = "getUniUnderlying";

    public static final String FUNC_GOVERNANCE = "governance";

    public static final String FUNC_ISLPCHECK = "isLPCheck";

    public static final String FUNC_KEYTOKENS = "keyTokens";

    public static final String FUNC_ONEINCHFACTORYADDRESS = "oneInchFactoryAddress";

    public static final String FUNC_PRECISIONDECIMALS = "precisionDecimals";

    public static final String FUNC_PRICINGTOKENS = "pricingTokens";

    public static final String FUNC_REMOVECURVEEXCEPTION = "removeCurveException";

    public static final String FUNC_REMOVEKEYTOKEN = "removeKeyToken";

    public static final String FUNC_REMOVEPRICINGTOKEN = "removePricingToken";

    public static final String FUNC_SETSTORAGE = "setStorage";

    public static final String FUNC_STORE = "store";

    public static final String FUNC_SUSHISWAPFACTORYADDRESS = "sushiswapFactoryAddress";

    public static final String FUNC_UNISWAPFACTORYADDRESS = "uniswapFactoryAddress";

    public static final Event CURVEEXCEPTIONADDED_EVENT = new Event("CurveExceptionAdded",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event CURVEEXCEPTIONREMOVED_EVENT = new Event("CurveExceptionRemoved",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DEFINEDOUTUPTCHANGED_EVENT = new Event("DefinedOutuptChanged",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event FACTORYCHANGED_EVENT = new Event("FactoryChanged",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event KEYTOKENADDED_EVENT = new Event("KeyTokenAdded",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event KEYTOKENREMOVED_EVENT = new Event("KeyTokenRemoved",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event PRICINGTOKENADDED_EVENT = new Event("PricingTokenAdded",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event PRICINGTOKENREMOVED_EVENT = new Event("PricingTokenRemoved",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event REGISTRYCHANGED_EVENT = new Event("RegistryChanged",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    @Deprecated
    protected OracleMainnet(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected OracleMainnet(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected OracleMainnet(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected OracleMainnet(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<CurveExceptionAddedEventResponse> getCurveExceptionAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CURVEEXCEPTIONADDED_EVENT, transactionReceipt);
        ArrayList<CurveExceptionAddedEventResponse> responses = new ArrayList<CurveExceptionAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CurveExceptionAddedEventResponse typedResponse = new CurveExceptionAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.newException = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.exceptionList = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CurveExceptionAddedEventResponse> curveExceptionAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, CurveExceptionAddedEventResponse>() {
            @Override
            public CurveExceptionAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CURVEEXCEPTIONADDED_EVENT, log);
                CurveExceptionAddedEventResponse typedResponse = new CurveExceptionAddedEventResponse();
                typedResponse.log = log;
                typedResponse.newException = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.exceptionList = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CurveExceptionAddedEventResponse> curveExceptionAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CURVEEXCEPTIONADDED_EVENT));
        return curveExceptionAddedEventFlowable(filter);
    }

    public List<CurveExceptionRemovedEventResponse> getCurveExceptionRemovedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CURVEEXCEPTIONREMOVED_EVENT, transactionReceipt);
        ArrayList<CurveExceptionRemovedEventResponse> responses = new ArrayList<CurveExceptionRemovedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CurveExceptionRemovedEventResponse typedResponse = new CurveExceptionRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oldException = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.exceptionList = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CurveExceptionRemovedEventResponse> curveExceptionRemovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, CurveExceptionRemovedEventResponse>() {
            @Override
            public CurveExceptionRemovedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CURVEEXCEPTIONREMOVED_EVENT, log);
                CurveExceptionRemovedEventResponse typedResponse = new CurveExceptionRemovedEventResponse();
                typedResponse.log = log;
                typedResponse.oldException = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.exceptionList = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CurveExceptionRemovedEventResponse> curveExceptionRemovedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CURVEEXCEPTIONREMOVED_EVENT));
        return curveExceptionRemovedEventFlowable(filter);
    }

    public List<DefinedOutuptChangedEventResponse> getDefinedOutuptChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEFINEDOUTUPTCHANGED_EVENT, transactionReceipt);
        ArrayList<DefinedOutuptChangedEventResponse> responses = new ArrayList<DefinedOutuptChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DefinedOutuptChangedEventResponse typedResponse = new DefinedOutuptChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.newOutputToken = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.oldOutputToken = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DefinedOutuptChangedEventResponse> definedOutuptChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DefinedOutuptChangedEventResponse>() {
            @Override
            public DefinedOutuptChangedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEFINEDOUTUPTCHANGED_EVENT, log);
                DefinedOutuptChangedEventResponse typedResponse = new DefinedOutuptChangedEventResponse();
                typedResponse.log = log;
                typedResponse.newOutputToken = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.oldOutputToken = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DefinedOutuptChangedEventResponse> definedOutuptChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEFINEDOUTUPTCHANGED_EVENT));
        return definedOutuptChangedEventFlowable(filter);
    }

    public List<FactoryChangedEventResponse> getFactoryChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(FACTORYCHANGED_EVENT, transactionReceipt);
        ArrayList<FactoryChangedEventResponse> responses = new ArrayList<FactoryChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            FactoryChangedEventResponse typedResponse = new FactoryChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.newFactory = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.oldFactory = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<FactoryChangedEventResponse> factoryChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, FactoryChangedEventResponse>() {
            @Override
            public FactoryChangedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(FACTORYCHANGED_EVENT, log);
                FactoryChangedEventResponse typedResponse = new FactoryChangedEventResponse();
                typedResponse.log = log;
                typedResponse.newFactory = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.oldFactory = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<FactoryChangedEventResponse> factoryChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(FACTORYCHANGED_EVENT));
        return factoryChangedEventFlowable(filter);
    }

    public List<KeyTokenAddedEventResponse> getKeyTokenAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(KEYTOKENADDED_EVENT, transactionReceipt);
        ArrayList<KeyTokenAddedEventResponse> responses = new ArrayList<KeyTokenAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            KeyTokenAddedEventResponse typedResponse = new KeyTokenAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.newKeyToken = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<KeyTokenAddedEventResponse> keyTokenAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, KeyTokenAddedEventResponse>() {
            @Override
            public KeyTokenAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(KEYTOKENADDED_EVENT, log);
                KeyTokenAddedEventResponse typedResponse = new KeyTokenAddedEventResponse();
                typedResponse.log = log;
                typedResponse.newKeyToken = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<KeyTokenAddedEventResponse> keyTokenAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(KEYTOKENADDED_EVENT));
        return keyTokenAddedEventFlowable(filter);
    }

    public List<KeyTokenRemovedEventResponse> getKeyTokenRemovedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(KEYTOKENREMOVED_EVENT, transactionReceipt);
        ArrayList<KeyTokenRemovedEventResponse> responses = new ArrayList<KeyTokenRemovedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            KeyTokenRemovedEventResponse typedResponse = new KeyTokenRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.keyToken = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<KeyTokenRemovedEventResponse> keyTokenRemovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, KeyTokenRemovedEventResponse>() {
            @Override
            public KeyTokenRemovedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(KEYTOKENREMOVED_EVENT, log);
                KeyTokenRemovedEventResponse typedResponse = new KeyTokenRemovedEventResponse();
                typedResponse.log = log;
                typedResponse.keyToken = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<KeyTokenRemovedEventResponse> keyTokenRemovedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(KEYTOKENREMOVED_EVENT));
        return keyTokenRemovedEventFlowable(filter);
    }

    public List<PricingTokenAddedEventResponse> getPricingTokenAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PRICINGTOKENADDED_EVENT, transactionReceipt);
        ArrayList<PricingTokenAddedEventResponse> responses = new ArrayList<PricingTokenAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PricingTokenAddedEventResponse typedResponse = new PricingTokenAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.newPricingToken = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PricingTokenAddedEventResponse> pricingTokenAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, PricingTokenAddedEventResponse>() {
            @Override
            public PricingTokenAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PRICINGTOKENADDED_EVENT, log);
                PricingTokenAddedEventResponse typedResponse = new PricingTokenAddedEventResponse();
                typedResponse.log = log;
                typedResponse.newPricingToken = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<PricingTokenAddedEventResponse> pricingTokenAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PRICINGTOKENADDED_EVENT));
        return pricingTokenAddedEventFlowable(filter);
    }

    public List<PricingTokenRemovedEventResponse> getPricingTokenRemovedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PRICINGTOKENREMOVED_EVENT, transactionReceipt);
        ArrayList<PricingTokenRemovedEventResponse> responses = new ArrayList<PricingTokenRemovedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PricingTokenRemovedEventResponse typedResponse = new PricingTokenRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.pricingToken = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PricingTokenRemovedEventResponse> pricingTokenRemovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, PricingTokenRemovedEventResponse>() {
            @Override
            public PricingTokenRemovedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PRICINGTOKENREMOVED_EVENT, log);
                PricingTokenRemovedEventResponse typedResponse = new PricingTokenRemovedEventResponse();
                typedResponse.log = log;
                typedResponse.pricingToken = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<PricingTokenRemovedEventResponse> pricingTokenRemovedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PRICINGTOKENREMOVED_EVENT));
        return pricingTokenRemovedEventFlowable(filter);
    }

    public List<RegistryChangedEventResponse> getRegistryChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REGISTRYCHANGED_EVENT, transactionReceipt);
        ArrayList<RegistryChangedEventResponse> responses = new ArrayList<RegistryChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RegistryChangedEventResponse typedResponse = new RegistryChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.newRegistry = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.oldRegistry = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RegistryChangedEventResponse> registryChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RegistryChangedEventResponse>() {
            @Override
            public RegistryChangedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(REGISTRYCHANGED_EVENT, log);
                RegistryChangedEventResponse typedResponse = new RegistryChangedEventResponse();
                typedResponse.log = log;
                typedResponse.newRegistry = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.oldRegistry = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RegistryChangedEventResponse> registryChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REGISTRYCHANGED_EVENT));
        return registryChangedEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> addCurveException(String newException, BigInteger exceptionList) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDCURVEEXCEPTION,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newException),
                        new org.web3j.abi.datatypes.generated.Uint256(exceptionList)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addKeyToken(String newToken) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDKEYTOKEN,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newToken)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addPricingToken(String newToken) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDPRICINGTOKEN,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newToken)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> changeCurveRegistry(String newRegistry) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CHANGECURVEREGISTRY,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newRegistry)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> changeDefinedOutput(String newOutputToken) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CHANGEDEFINEDOUTPUT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOutputToken)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> changeOneInchFactory(String newFactory) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CHANGEONEINCHFACTORY,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newFactory)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> changeSushiFactory(String newFactory) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CHANGESUSHIFACTORY,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newFactory)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> changeUniFactory(String newFactory) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CHANGEUNIFACTORY,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newFactory)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> checkKeyToken(String token) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CHECKKEYTOKEN,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, token)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> checkPricingToken(String token) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CHECKPRICINGTOKEN,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, token)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> computePrice(String token) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_COMPUTEPRICE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, token)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> curveExceptionList0(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CURVEEXCEPTIONLIST0,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> curveExceptionList1(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CURVEEXCEPTIONLIST1,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> curveRegistryAddress() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CURVEREGISTRYADDRESS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> definedOutputToken() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DEFINEDOUTPUTTOKEN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple2<List<String>, List<BigInteger>>> getCurveUnderlying(String token) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCURVEUNDERLYING,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, token)),
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray8<Address>>() {}, new TypeReference<StaticArray8<Uint256>>() {}));
        return new RemoteFunctionCall<Tuple2<List<String>, List<BigInteger>>>(function,
                new Callable<Tuple2<List<String>, List<BigInteger>>>() {
                    @Override
                    public Tuple2<List<String>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<String>, List<BigInteger>>(
                                convertToNative((List<Address>) results.get(0).getValue()),
                                convertToNative((List<Uint256>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<Tuple4<String, String, Boolean, Boolean>> getLargestPool(String token, List<String> tokenList) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETLARGESTPOOL,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, token),
                        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                                org.web3j.abi.datatypes.Address.class,
                                org.web3j.abi.Utils.typeMap(tokenList, org.web3j.abi.datatypes.Address.class))),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple4<String, String, Boolean, Boolean>>(function,
                new Callable<Tuple4<String, String, Boolean, Boolean>>() {
                    @Override
                    public Tuple4<String, String, Boolean, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, String, Boolean, Boolean>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (Boolean) results.get(2).getValue(),
                                (Boolean) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple2<List<String>, List<BigInteger>>> getOneInchUnderlying(String token) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETONEINCHUNDERLYING,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, token)),
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray2<Address>>() {}, new TypeReference<StaticArray2<Uint256>>() {}));
        return new RemoteFunctionCall<Tuple2<List<String>, List<BigInteger>>>(function,
                new Callable<Tuple2<List<String>, List<BigInteger>>>() {
                    @Override
                    public Tuple2<List<String>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<String>, List<BigInteger>>(
                                convertToNative((List<Address>) results.get(0).getValue()),
                                convertToNative((List<Uint256>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getPrice(String token) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETPRICE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, token)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple2<List<String>, List<BigInteger>>> getUniUnderlying(String token) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETUNIUNDERLYING,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, token)),
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray2<Address>>() {}, new TypeReference<StaticArray2<Uint256>>() {}));
        return new RemoteFunctionCall<Tuple2<List<String>, List<BigInteger>>>(function,
                new Callable<Tuple2<List<String>, List<BigInteger>>>() {
                    @Override
                    public Tuple2<List<String>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<String>, List<BigInteger>>(
                                convertToNative((List<Address>) results.get(0).getValue()),
                                convertToNative((List<Uint256>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<String> governance() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GOVERNANCE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple3<Boolean, Boolean, Boolean>> isLPCheck(String token) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISLPCHECK,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, token)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Bool>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple3<Boolean, Boolean, Boolean>>(function,
                new Callable<Tuple3<Boolean, Boolean, Boolean>>() {
                    @Override
                    public Tuple3<Boolean, Boolean, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<Boolean, Boolean, Boolean>(
                                (Boolean) results.get(0).getValue(),
                                (Boolean) results.get(1).getValue(),
                                (Boolean) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<String> keyTokens(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_KEYTOKENS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> oneInchFactoryAddress() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ONEINCHFACTORYADDRESS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> precisionDecimals() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PRECISIONDECIMALS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> pricingTokens(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PRICINGTOKENS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> removeCurveException(String exception) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REMOVECURVEEXCEPTION,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, exception)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> removeKeyToken(String keyToken) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REMOVEKEYTOKEN,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, keyToken)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> removePricingToken(String pricingToken) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REMOVEPRICINGTOKEN,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, pricingToken)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setStorage(String _store) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETSTORAGE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _store)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> store() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_STORE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> sushiswapFactoryAddress() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUSHISWAPFACTORYADDRESS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> uniswapFactoryAddress() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_UNISWAPFACTORYADDRESS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    @Deprecated
    public static OracleMainnet load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new OracleMainnet(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static OracleMainnet load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new OracleMainnet(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static OracleMainnet load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new OracleMainnet(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static OracleMainnet load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new OracleMainnet(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<OracleMainnet> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _storage) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _storage)));
        return deployRemoteCall(OracleMainnet.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<OracleMainnet> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _storage) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _storage)));
        return deployRemoteCall(OracleMainnet.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<OracleMainnet> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _storage) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _storage)));
        return deployRemoteCall(OracleMainnet.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<OracleMainnet> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _storage) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _storage)));
        return deployRemoteCall(OracleMainnet.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class CurveExceptionAddedEventResponse extends BaseEventResponse {
        public String newException;

        public BigInteger exceptionList;
    }

    public static class CurveExceptionRemovedEventResponse extends BaseEventResponse {
        public String oldException;

        public BigInteger exceptionList;
    }

    public static class DefinedOutuptChangedEventResponse extends BaseEventResponse {
        public String newOutputToken;

        public String oldOutputToken;
    }

    public static class FactoryChangedEventResponse extends BaseEventResponse {
        public String newFactory;

        public String oldFactory;
    }

    public static class KeyTokenAddedEventResponse extends BaseEventResponse {
        public String newKeyToken;
    }

    public static class KeyTokenRemovedEventResponse extends BaseEventResponse {
        public String keyToken;
    }

    public static class PricingTokenAddedEventResponse extends BaseEventResponse {
        public String newPricingToken;
    }

    public static class PricingTokenRemovedEventResponse extends BaseEventResponse {
        public String pricingToken;
    }

    public static class RegistryChangedEventResponse extends BaseEventResponse {
        public String newRegistry;

        public String oldRegistry;
    }
}
